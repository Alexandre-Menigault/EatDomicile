// <auto-generated />
using EatDomicile.Core.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EatDomicile.Core.Migrations
{
    [DbContext(typeof(ProductContext))]
    partial class ProductConetxtModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatDomicile.Core.Models.Dough", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Doughs");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Food", b =>
                {
                    b.HasBaseType("EatDomicile.Core.Models.Produit");

                    b.Property<bool>("Vegetarien")
                        .HasColumnType("bit");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pasta", b =>
                {
                    b.HasBaseType("EatDomicile.Core.Models.Food");

                    b.Property<int>("KCal")
                        .HasColumnType("int")
                        .HasColumnName("Kcal");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.ToTable("Pastas");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pizza", b =>
                {
                    b.HasBaseType("EatDomicile.Core.Models.Food");

                    b.Property<int>("DoughId")
                        .HasColumnType("int");

                    b.HasIndex("DoughId");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Food", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Produit", null)
                        .WithOne()
                        .HasForeignKey("EatDomicile.Core.Models.Food", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pasta", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Food", null)
                        .WithOne()
                        .HasForeignKey("EatDomicile.Core.Models.Pasta", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pizza", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Dough", "Dough")
                        .WithMany()
                        .HasForeignKey("DoughId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatDomicile.Core.Models.Food", null)
                        .WithOne()
                        .HasForeignKey("EatDomicile.Core.Models.Pizza", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dough");
                });
#pragma warning restore 612, 618
        }
    }
}

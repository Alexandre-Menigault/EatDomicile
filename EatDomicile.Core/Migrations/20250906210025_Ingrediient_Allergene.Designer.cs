// <auto-generated />
using System;
using EatDomicile.Core.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EatDomicile.Core.Migrations
{
    [DbContext(typeof(ProductContext))]
    [Migration("20250906210025_Ingrediient_Allergene")]
    partial class Ingrediient_Allergene
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatDomicile.Core.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Country");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("State");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Street");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Dough", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Doughs");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Allergene")
                        .HasColumnType("bit")
                        .HasColumnName("Allergene");

                    b.Property<int?>("BurgerId")
                        .HasColumnType("int");

                    b.Property<int>("Kcal")
                        .HasColumnType("int")
                        .HasColumnName("Kcal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int?>("PizzaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("PizzaId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Drink", b =>
                {
                    b.HasBaseType("EatDomicile.Core.Models.Product");

                    b.Property<bool>("Fizzy")
                        .HasColumnType("bit");

                    b.Property<int>("KCal")
                        .HasColumnType("int");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Food", b =>
                {
                    b.HasBaseType("EatDomicile.Core.Models.Product");

                    b.Property<bool>("Vegetarien")
                        .HasColumnType("bit");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Burger", b =>
                {
                    b.HasBaseType("EatDomicile.Core.Models.Food");

                    b.ToTable("Burgers");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pasta", b =>
                {
                    b.HasBaseType("EatDomicile.Core.Models.Food");

                    b.Property<int>("KCal")
                        .HasColumnType("int")
                        .HasColumnName("Kcal");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.ToTable("Pastas");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pizza", b =>
                {
                    b.HasBaseType("EatDomicile.Core.Models.Food");

                    b.Property<int>("DoughId")
                        .HasColumnType("int");

                    b.HasIndex("DoughId");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Ingredient", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Burger", "Burger")
                        .WithMany("Ingredients")
                        .HasForeignKey("BurgerId");

                    b.HasOne("EatDomicile.Core.Models.Pizza", "Pizza")
                        .WithMany("Ingredients")
                        .HasForeignKey("PizzaId");

                    b.Navigation("Burger");

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Order", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatDomicile.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.User", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatDomicile.Core.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Drink", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("EatDomicile.Core.Models.Drink", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Food", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("EatDomicile.Core.Models.Food", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Burger", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Food", null)
                        .WithOne()
                        .HasForeignKey("EatDomicile.Core.Models.Burger", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pasta", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Food", null)
                        .WithOne()
                        .HasForeignKey("EatDomicile.Core.Models.Pasta", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pizza", b =>
                {
                    b.HasOne("EatDomicile.Core.Models.Dough", "Dough")
                        .WithMany()
                        .HasForeignKey("DoughId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatDomicile.Core.Models.Food", null)
                        .WithOne()
                        .HasForeignKey("EatDomicile.Core.Models.Pizza", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dough");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Burger", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("EatDomicile.Core.Models.Pizza", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
